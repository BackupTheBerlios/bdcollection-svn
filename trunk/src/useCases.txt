En cours
---------------------------------------




Use Case
---------------------------------------
* passage en codage UTF-8 ???
  * lien vers 2 fichiers avec encodage différents
* Ajouter une nouvelle Série
  * Check
* Ajouter une nouvelle BD
  * Check
- Modifier une BD existante
  - quand dans une vue, la modification n'est pas réaffichée de suite
* Afficher toutes les infos sur une BD existante
* Détruire une BD
  * Détruire un enregistrement
* Détruire une série
  + Que deviennent ses fils ?
    + attaché à Divers
* Sauvegarder la liste des BD
  * il faudrait que le nom actuel de la base soit proposé
*  Sauvegarder la liste des BD avec un nom choisi
  * il faudrait que le nom actuel de la base soit proposé
* [Option] Charger une liste des BD
- Afficher la liste des Séries
  - Changer le nom du Tag 'Parent'
- Afficher les BD d'une Série
  * par le biais de chercher
  * trouver le Field automatiquement ??? (SPECIFIC indexSerie = 0)
  * trouver l'index d'un Field de nom donné => déjà fait.
  - sur quelles table?
- Recherche pré-remplie avec la BD courante...
  - pour auteur, serie, etc
- Faire des recherches avec une combinaison de critères
  -> par le biais de chercher
  - dans quoi est stocké le résultat ?
- Colonne/Field
  * mémoriser la taille d'une colonne. => voir Param plus bas
  - s'en servir quand on fait un PDF
- View
  - si provient d'une recherche, afficher la recherche en haut
    - [Option] modifier la recherche...
  - [Option] sauvegarder ?
  - Détruire
   - Si des view dépendent de cette View ?
  * Imprimer
- les choses à paramétrer
  * où sauvegarder ces données ?
    * On utilise les Preferences de Java
    [ valeurs par défaut qui sont remplacées par des valeurs de session ?
    [ sauver les valeurs par défaut
    [ dans les attributs des tables ?
  - param
    - nom des Tabs
      - Table : nom des Tables
        - complete <- label Database
      - view : changer nom de view ??
      - menu : tenir compte du nom des Tables.
    - les views en cours
      - mémoriser / sérialiser les SearchOperator et SearchedElement
    - une Préférence par JTableData (unique name ?)
      * marche pas encore très bien quand on commence sans BDD
   	  - changer les préferences avec le fichier.
   	    - et remonter jusqu'à JFrame (TestBDD)
   	    ~> en fait, la position/location de la fenêtre reste stockée à haut niveau (JFrame)
      * pour chaque table, un noeud avec
      	* ordre
      	* et largeur des colonnes
      - quand on "tue" une View, ne pas oublier d'enlever les préférences.
        + pour l'instant, les View n'ont pas de préférences. 
      * appeler routine spéciale pour ajouter une gestion des préférences -> initPreferences.
    * une Préférence par JBaseDeDonnes (unique name ?)
      * ComponentListener/Adapter pour quand la taille change.
      * modifier la Preference
- Imprimer une BD
  * format PDF
    * afficher une table (qui se répète sur plusieurs pages -> RepeatingTable)
    * afficher des sections faites d'un titre et d'une table
    * afficher le titre du document
      * répéter dans header, avec nom de la BDD
    * afficher le nb de pages
  - Une table, triée ou non, choix des champs.
  - type de tri dans Print?
    - pour l'instant
       - no sort : rien
       - parent/serie = pareil, par série.
  * imprimer en triant par série ++
  * PDF : gérer la taille de la police et des colonnes.
- Trier
  * Quand on appuie sur une colonne
    => en utilisant les JSortTable de Claude Duguay.
  * Ca modifie 
  ! Dans View, il me semble qu'on sait trier
  * un truc spécial BD : tri par Série + Volume, Divers + Auteur....
    - proposer de l'appliquer si View est descendant de TableComplete
* Quitter
  * Demande si on sauve avant de quitter...
* Afficher le nom de la base
  * Titre de la fenêtre
  . Avant la base
- Icones 
- Couverture de la BD
- Menu contextuel
- FTP
  - charger par FTP
  - sauver par FTP
- Comparer deux BDD
* Ajouter des BDs à la suite....
  * que se passe-t-il quand elle est trop proche ?
* enlever log4j.config de SVN
* vérifier que les données ne sont pas corrompues.
  * dans la lecture du XML, dans 'characters" (CellFactory) j'ai utilisé un StringBuffer pour
    collationner tout ce qui est lu entre un 'start' et un 'end'.
  ? éventuellement le faire pour les Fields


Les champs

Série: (clef = )
 - Série : CellStr
 - Auteur(s) : CellStr
 - Editeur(s) : CellStr
 - [Option] Commentaires : CellTxt

BD: (clef = )
 - Série : lien vers la série, 'Divers' par défaut ??
 - Titre : CellStr
 - Auteur(s) : CellStr => Série:Auteur
 - Editeur(s) : CellStr => Série:Editeur(s)
 - Numéro (dans la série) : CellStr
 - Proprio : CellStr
 - Lieu : CellStr
 - [Option] Commentaires : CellTxt
 - [Option] Résumé : CellTxt

Se posent alors plusieurs questions.
- clef
   Il y a en plus un champs 'key' qui est unique. Comment on met à jour? On se fait pas chier et il y a un numero maxi pour chaque classe? Mais ca peut d�pendre de la BDD, donc il faut le sauvegarder (ou le rechercher quand on charge la BDD).
   CellInt qui est alors un autre type de Cell ou simplement un attribut de l'enregistrement (comme c'est le cas en ce moment je crois).
- Pour une BD/Série, un petit texte court qui résume l'élément (et qui peut être utilisé dans des menus déroulants?).
- Quels formats utiliser?
  + XML pour le stockage d'information
  - impression
  - [Option] HTML
  - Ou alors tout XML mais avec des translations ultérieures
- Chercher
  - Un Enregistrement avec des RegExp, une Table/View... donne comme résultat une autre Table/View...
- Essayer de mieux penser la difference (pour quel usage) de Table et View.
  - Par exemple, pour l'instant n'utiliser que des Tables???
